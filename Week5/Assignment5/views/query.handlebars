<div id="div">
    
    <div class="field">
        <div class="select">
            <select name="verb">
                <option value="GET">GET</option>
            </select>
        </div>
    </div>
    <br>
    <div class="field">
        <label class="label" for="resource">Query:</label>
        <div class="control">
            <input style="width:10%" class="input" type="text" name="resource" value="employees/"/>
        </div>
    </div>


    <div x-data="{sortingToggled: false}" >
        <div class="field">
            <label class="checkbox">
                <input type="checkbox" id="sortingToggled" x-model="sortingToggled">
                Sort?
            </label>
        </div>

        <div class="mb-3" x-show="sortingToggled" x-transition>

            <div class="field">
                <label class="label" for="isSortToggledOn">Sort On</label>
                <div class="select">
                    <select name="isSortToggledOn">
                        <option value="firstName">First Name</option>
                        <option value="lastName">Last Name</option>
                        <option value="department">Department</option>
                        <option value="startDate" >Start Date</option>
                        <option value="jobTitle" >Job Title</option>
                        <option value="salary" >Salary</option>
                    </select>
                </div>
            </div>

            <div class="field">
                <label class="label" for="sortDirection">Sort Direction</label>
                <div class="select">
                    <select name="sortDirection">
                        <option value="ascending">Ascending</option>
                        <option value="descending">Descending</option>
                    </select>
                </div>
            </div>

        </div>
    </div>


    <div x-data="{isFilteringToggled: false}" >
        <div class="field">
            <label class="checkbox">
                <input type="checkbox" id="isFilteringToggled" x-model="isFilteringToggled">
                Filter?
            </label>
        </div>
        <div class="mb-3" id="filter" x-show="isFilteringToggled" x-transition>
            <div class="field">
                <label class="label" for="firstName">First Name</label>
                <div class="control">
                    <input class="input" type="text" name="firstName" value=""/>
                </div>
            </div>
            <div class="field">
                <label class="label" for="lastName">Last Name</label>
                <div class="control">
                    <input class="input" type="text" name="lastName" value=""/>
                </div>
            </div>
            <div class="field">
                <label class="label" for="department">Department</label>
                <div class="control">
                    <input class="input" type="text" name="department" value=""/>
                </div>
            </div>
            <div class="field">
                <label class="label" for="startDate">Start Date</label>
                <div class="control">
                    <input class="input" type="date" name="startDate" value=""/>
                </div>
            </div>
            <div class="field">
                <label class="label" for="jobTitle">Job Title</label>
                <div class="control">
                    <input class="input" type="text" name="jobTitle" value=""/>
                </div>
            </div>
            <div class="field">
                <label class="label" for="salary">Salary</label>
                <div class="control">
                    <input class="input" type="number" name="salary" value=""/>
                </div>
            </div>
        </div>
    </div>

    <div class="field">
        <button id="make-request">Make Request</button>
    </div>


    <div>
        <h3 class="subtitle"><strong>Results:</strong></h3>
        <p>Query:</p>
        <p id="result-query"></p>
        <div class="field">
            <textarea class="textarea" name="results" readonly></textarea>
        </div>
    </div>

</div>


<script>


    const sortingToggledSelector = $('#sortingToggled');
    const isFilteringToggledSelector = $('#isFilteringToggled');
    const resourceSelector = $('input[name="resource"]');
    const isSortToggledOnSelector = $('select[name="isSortToggledOn"]');
    const sortDirectionSelector = $('select[name="sortDirection"]');
    const httpVerbSelector = $('select[name="verb"]');
    const resultsSelector = $('textarea[name="results"]');
    const queryCallSelector = $('#result-query');

    $("#make-request").on('click', () => {

        let url = `${window.location.href.match(/^.*\//)}api/v1/${resourceSelector.val()}`

        if(sortingToggledSelector.prop('checked')) {
            url += `?_sort=${(sortDirectionSelector.val() === 'descending') ? '-' : ''}${isSortToggledOnSelector.val()}`
        }

        if(isFilteringToggledSelector.prop('checked')) {
            url += `${(sortingToggledSelector.prop('checked')) ? '&' : '?'}`;
            $("#filter :input").each(function (index) {
                let item = $(this);
                if (item.val() !== '') {
                    url += `${item.prop('name')}=${item.val()}&`;
                }
            });
        }

        if (url.slice(-1) === '&' || url.slice(-1) === '?') {
            url = url.slice(0, -1);
        }

        queryCallSelector.text(url);
        makeCall(url);
    });

    const makeCall = (url, data) => {

        let headers = new Headers();
        headers.set('Content-Type', 'application/json');

        let myInit = {
            method: httpVerbSelector.val(),
            headers: headers,
            mode:'cors',
            cache:'default'
        }

        
        if(['POST', 'PUT'].indexOf(httpVerbSelector.val()) > -1){
           
        }

        fetch(new Request(url, myInit)).then(response => {
            let contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return response.text();
            }

            if(response.status === 204){
                return 'Delete';
            }

            throw new TypeError("This isn't JSON");

        }).then(jsonText => {
            resultsSelector.val(jsonText);
        }).catch(err => {
            console.log(err)
        })

    }


</script>
